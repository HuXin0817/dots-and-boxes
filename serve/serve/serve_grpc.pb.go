// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: serve.proto

package serve

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Serve_PostGameInformation_FullMethodName = "/serve.Serve/PostGameInformation"
	Serve_InquireBestEdge_FullMethodName     = "/serve.Serve/InquireBestEdge"
)

// ServeClient is the client API for Serve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServeClient interface {
	PostGameInformation(ctx context.Context, in *GameInformationRequest, opts ...grpc.CallOption) (*GameInformationRequestResponse, error)
	InquireBestEdge(ctx context.Context, in *InquireBestEdgeRequest, opts ...grpc.CallOption) (*InquireBestEdgeResponse, error)
}

type serveClient struct {
	cc grpc.ClientConnInterface
}

func NewServeClient(cc grpc.ClientConnInterface) ServeClient {
	return &serveClient{cc}
}

func (c *serveClient) PostGameInformation(ctx context.Context, in *GameInformationRequest, opts ...grpc.CallOption) (*GameInformationRequestResponse, error) {
	out := new(GameInformationRequestResponse)
	err := c.cc.Invoke(ctx, Serve_PostGameInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serveClient) InquireBestEdge(ctx context.Context, in *InquireBestEdgeRequest, opts ...grpc.CallOption) (*InquireBestEdgeResponse, error) {
	out := new(InquireBestEdgeResponse)
	err := c.cc.Invoke(ctx, Serve_InquireBestEdge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServeServer is the server API for Serve service.
// All implementations must embed UnimplementedServeServer
// for forward compatibility
type ServeServer interface {
	PostGameInformation(context.Context, *GameInformationRequest) (*GameInformationRequestResponse, error)
	InquireBestEdge(context.Context, *InquireBestEdgeRequest) (*InquireBestEdgeResponse, error)
	mustEmbedUnimplementedServeServer()
}

// UnimplementedServeServer must be embedded to have forward compatible implementations.
type UnimplementedServeServer struct {
}

func (UnimplementedServeServer) PostGameInformation(context.Context, *GameInformationRequest) (*GameInformationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostGameInformation not implemented")
}
func (UnimplementedServeServer) InquireBestEdge(context.Context, *InquireBestEdgeRequest) (*InquireBestEdgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquireBestEdge not implemented")
}
func (UnimplementedServeServer) mustEmbedUnimplementedServeServer() {}

// UnsafeServeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServeServer will
// result in compilation errors.
type UnsafeServeServer interface {
	mustEmbedUnimplementedServeServer()
}

func RegisterServeServer(s grpc.ServiceRegistrar, srv ServeServer) {
	s.RegisterService(&Serve_ServiceDesc, srv)
}

func _Serve_PostGameInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServeServer).PostGameInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serve_PostGameInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServeServer).PostGameInformation(ctx, req.(*GameInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serve_InquireBestEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InquireBestEdgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServeServer).InquireBestEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serve_InquireBestEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServeServer).InquireBestEdge(ctx, req.(*InquireBestEdgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Serve_ServiceDesc is the grpc.ServiceDesc for Serve service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Serve_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serve.Serve",
	HandlerType: (*ServeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostGameInformation",
			Handler:    _Serve_PostGameInformation_Handler,
		},
		{
			MethodName: "InquireBestEdge",
			Handler:    _Serve_InquireBestEdge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serve.proto",
}
