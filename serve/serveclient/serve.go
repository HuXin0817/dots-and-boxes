// Code generated by goctl. DO NOT EDIT.
// Source: serve.proto

package serveclient

import (
	"context"

	"serve/serve"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GameInformationRequest         = serve.GameInformationRequest
	GameInformationRequestResponse = serve.GameInformationRequestResponse
	InquireBestEdgeRequest         = serve.InquireBestEdgeRequest
	InquireBestEdgeResponse        = serve.InquireBestEdgeResponse

	Serve interface {
		PostGameInformation(ctx context.Context, in *GameInformationRequest, opts ...grpc.CallOption) (*GameInformationRequestResponse, error)
		InquireBestEdge(ctx context.Context, in *InquireBestEdgeRequest, opts ...grpc.CallOption) (*InquireBestEdgeResponse, error)
	}

	defaultServe struct {
		cli zrpc.Client
	}
)

func NewServe(cli zrpc.Client) Serve {
	return &defaultServe{
		cli: cli,
	}
}

func (m *defaultServe) PostGameInformation(ctx context.Context, in *GameInformationRequest, opts ...grpc.CallOption) (*GameInformationRequestResponse, error) {
	client := serve.NewServeClient(m.cli.Conn())
	return client.PostGameInformation(ctx, in, opts...)
}

func (m *defaultServe) InquireBestEdge(ctx context.Context, in *InquireBestEdgeRequest, opts ...grpc.CallOption) (*InquireBestEdgeResponse, error) {
	client := serve.NewServeClient(m.cli.Conn())
	return client.InquireBestEdge(ctx, in, opts...)
}
